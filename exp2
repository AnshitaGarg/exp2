import tensorflow as tf
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

from sklearn.datasets import make_moons

samples = 1000
X,y = make_moons(
    samples,
    noise=0.03,
    random_state=42
)
X.shape, y.shape

moons = pd.DataFrame({
    "X0":X[:,0],
    "X1":X[:,1],
    "labels":y
})
moons.head()

plt.scatter(X[:,0],X[:,1],c=y, cmap=plt.cm.RdYlBu)

x_train, y_train = X[:800],y[:800]
x_test, y_test = X[800:],y[800:]
x_train.shape, y_train.shape, x_test.shape, y_test.shape

model_results= {}

tf.random.set_seed(42)

model_1 = tf.keras.Sequential([
    tf.keras.layers.Dense(4, activation="relu"),
    tf.keras.layers.Dense(1, activation="sigmoid")
])

model_1.compile(
    loss=tf.keras.losses.BinaryCrossentropy(),
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),
    metrics=['accuracy']
)

history_1 = model_1.fit(x_train, y_train,epochs=100, verbose=0)

res = model_1.evaluate(x_test, y_test)
model_results["model_1"] = {
    "loss":f"{res[0]}",
    "accuracy":f"{res[1]}"
}
model_results

from mlxtend.plotting import plot_decision_regions
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.title("Decision Boundary of Train Data")
plot_decision_regions(x_train, y_train, clf=model_1, legend=2)
plt.subplot(1,2,2)
plt.title("Decision Boundary of Test Data")
plot_decision_regions(x_test, y_test, clf=model_1, legend=2)

pd.DataFrame(history_1.history).plot()

##Training another model with one more layer and 10x learning rate

tf.random.set_seed(42)

model_2 = tf.keras.Sequential([
    tf.keras.layers.Dense(4, activation="relu"),
    tf.keras.layers.Dense(4, activation="relu"),
    tf.keras.layers.Dense(1, activation="sigmoid")
])

model_2.compile(
    loss=tf.keras.losses.BinaryCrossentropy(),
    optimizer=tf.keras.optimizers.Adam(learning_rate=0.01),
    metrics=['accuracy']
)

history_2 = model_2.fit(x_train,y_train, epochs=100, verbose=0)
res = model_2.evaluate(x_test, y_test)
model_results["model_2"] = {
    "loss":f"{res[0]}",
    "accuracy":f"{res[1]}"
}
model_results

from mlxtend.plotting import plot_decision_regions
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.title("Decisiona Boundary of Train Data")
plot_decision_regions(x_train, y_train, clf=model_2, legend=2)
plt.subplot(1,2,2)
plt.title("Decision Boundary of Test Data")
plot_decision_regions(x_test, y_test, clf=model_2, legend=2)
